package me.sablednah.legendquest.skills;

import java.util.ArrayList;

import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityDamageEvent;
import org.bukkit.event.entity.EntityDamageEvent.DamageCause;

@SkillManifest(name = "Invulnerability", type = SkillType.PASSIVE, author = "SableDnah", version = 1.1D, 
description = "Reduce Damage of type: [types], by [reduction]%", 
consumes = "", manaCost = 0, 
levelRequired = 0, skillPoints = 0, 
buildup = 0, delay = 0, duration = 0, cooldown = 0, 
dblvarnames = { "reduction" }, dblvarvalues = { 100.0 }, 
intvarnames = { "override" }, intvarvalues = { 0 }, 
strvarnames = { "types" }, strvarvalues = { "FIRE,FIRE_TICK,LAVA" }
)

/*
CONTACT
ENTITY_ATTACK
PROJECTILE
SUFFOCATION
FALL
FIRE
FIRE_TICK
MELTING
LAVA
DROWNING
BLOCK_EXPLOSION
ENTITY_EXPLOSION
VOID
LIGHTNING
SUICIDE
STARVATION
POISON
MAGIC
WITHER
FALLING_BLOCK
THORNS
CUSTOM
*/

public class Invulnerability extends Skill implements Listener {

	public boolean onEnable() {
		return true;
	}

	public void onDisable() { /* nothing to do */
	}

	public CommandResult onCommand(Player p) { // does not require command
		return CommandResult.NOTAVAILABLE;
	}

	@EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true)
	public void doSoak(EntityDamageEvent event) {
		if ((event.getEntity() instanceof Player)) {
			Player p = (Player) event.getEntity();
			if (!validSkillUser(p)) {
				return;
			}

			// load skill options
			SkillDataStore data = this.getPlayerSkillData(p);

			double reduction = 1.0D -(((Double) data.vars.get("reduction")) / 100.0D);
			Integer override = ((Integer) data.vars.get("override"));

			if (override == 0){
				if (reduction>1.0D) { reduction = 1.0D; }
				if (reduction<0.0D) { reduction = 0.0D; }
			}
			String types = ((String) data.vars.get("types"));

			ArrayList<DamageCause> causes = new ArrayList<DamageCause>();

			String[] list = types.split("\\s*,\\s*");
			for (String s : list) {
				causes.add(DamageCause.valueOf(s));
			}
			
			DamageCause type = event.getCause();
			
			if (lq.configMain.debugMode) {lq.debug.info(p.getDisplayName() + " took " + type + " : reduction=" + reduction + " : types = "+ types); }		
			if (causes.contains(type)) {
				if (lq.configMain.debugMode) {lq.debug.info(p.getDisplayName() + " damage matched "+type);}
				double dmg = event.getDamage();
				if (lq.configMain.debugMode) {lq.debug.info(type.toString() + " " + dmg + " before");}
				dmg = dmg * reduction;
				event.setDamage(dmg);
				if (lq.configMain.debugMode) {lq.debug.info(type.toString() + " " + dmg + " after");}
				if (dmg <0.1 && override == 0) {
					event.setCancelled(true);
					if (lq.configMain.debugMode) {lq.debug.info(type.toString() + " event cancelled");}
				}
			}
		}
	}
}
